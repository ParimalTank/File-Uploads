import { useState } from "react";
import { compressFile, download, readFileAsBase64 } from "../utils/helper";
import axios from "axios";
import styles from '@/styles/Home.module.css'
import FileInput from "@/components/Fileinput";
import Head from "next/head";
import ImagePreviewer from "@/components/Imagepreviewer";
import { useRouter } from "next/router";

export default function Home() {
  const [selectedImage, setSelectedImage] = useState(null);
  const [compressedImage, setCompressedImage] = useState();
  const [isCompressing, setIsCompressing] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const router = useRouter();

  const handleOnChange = (event) => {
    setSelectedImage(event.target.files[0]);
  };

  const handleDownload = () => {
    download(compressedImage);
  };

  const handleUpload = async () => {

    const fileInBase64 = await readFileAsBase64(compressedImage);

    setIsUploading(true);
    try {
      const res = await axios.post("/api/upload", {
        file: fileInBase64
      });
      alert(res.data.message);
    } catch (error) {
      console.log({ error });
    } finally {
      setIsUploading(false);
    }
  };

  const handleCompressFile = async () => {
    if (selectedImage) {
      try {
        setIsCompressing(true);
        const compressedImageFile = await compressFile(selectedImage);

        setCompressedImage(compressedImageFile);
      } catch (error) {
        console.log({ error });
      } finally {
        setIsCompressing(false);
      }
    }
  };

  const handleClick = () => {
    router.push('/resizeimage');
  }

  return (
    <>
      <Head>
        <title>File Compression</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className={styles.container}>
        <FileInput handleOnChange={handleOnChange} />
        <button onClick={handleClick} >Resize Image</button>
        <article className={styles.previewer}>
          <aside>
            <ImagePreviewer imageFile={selectedImage} />
            <div className={styles["button-wrapper"]}>
              {selectedImage && (
                <button
                  diasbled={isCompressing.toString()}
                  onClick={handleCompressFile}
                  className={styles.button}
                >
                  {isCompressing ? "Compressing..." : " Compress Image"}
                </button>
              )}
            </div>
          </aside>

          <aside>
            <ImagePreviewer imageFile={compressedImage} />
            <div className={styles["button-wrapper"]}>
              {compressedImage && (
                <>
                  <button onClick={handleDownload} className={styles.downloadBtn}>
                    Download
                  </button>
                  <button
                    className={styles.uploadBtn}
                    onClick={handleUpload}
                    disabled={isUploading.toString()}
                  >
                    {isUploading ? "uploading..." : "upload"}
                  </button>
                </>
              )}
            </div>
          </aside>
        </article>
      </section>
    </>
  )
}